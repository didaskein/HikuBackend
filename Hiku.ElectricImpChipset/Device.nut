// Copyright 2015 hiku labs, inc. All rights reserved. Confidential.
// Setup the server to behave when we have the no-wifi condition

// HACK HACK HACK
// switch on power to scanner and microphone right away to avoid
// brown-outs (Imp OS32 bug)


// Configure I2C bus on pins 8 & 9
local i2cPort = hardware.i2c89;
i2cPort.configure(CLOCK_SPEED_400_KHZ);
local sx1508_address = 0x46;
// set all pins on the SX1508 to inputs
i2cPort.write(sx1508_address, "\x07\xff");
// enable the pull-up resistor for the button (BUTTON_L),
// disable pull-up for microphone and scanner (SW_VCC_EN_L)
i2cPort.write(sx1508_address, "\x03\x04");
// enable the pull-down resistor for SW_VCC_EN_L
// to slowly switch on the SI2307DS to provide power
// to scanner and microphone 
i2cPort.write(sx1508_address, "\x04\x10");
imp.sleep(0.025);
// set SW_VCC_EN_L to output mode and drive it low
i2cPort.write(sx1508_address, "\x08\xef");
i2cPort.write(sx1508_address, "\x07\xef");
imp.sleep(0.001);
i2cPort.disable();


server.setsendtimeoutpolicy(RETURN_ON_ERROR, WAIT_TIL_SENT, 30);


imp.wakeup(0.001, function(){
   if(imp.getssid() != "")
   {
       server.connect(null, 2.0);
   }
});


local sendBufferSize = 16*1024; // 24K send buffer size

local oldsize = imp.setsendbuffersize(sendBufferSize);

// Always enable blinkup to keep LED flashing; power costs are negligible
imp.enableblinkup(true);

local entryTime = hardware.millis();

/*
gInitTime <- { 
            overall = 0, 
                piezo = 0, 
                button = 0, 
                accel = 0,
                scanner = 0,
                charger = 0,
                inthandler = 0,
                init_stage1 = 0,
                init_stage2 = 0,
                init_unused = 0,
            }; 
*/
local connection_available = false;

/*
// BOOT UP REASON MASK
const BOOT_UP_REASON_COLD_BOOT= 0x0000h;
const BOOT_UP_REASON_ACCEL    =    1 << 0; // 0x0001h
const BOOT_UP_REASON_CHRG_ST  =    1 << 1; // 0x0002h
const BOOT_UP_REASON_BTUTTON  =    1 << 2; // 0x0004h
const BOOT_UP_REASON_TOUCH    =    1 << 3; // 0x0008h
const BOOT_UP_REASON_SW_VCC   =    1 << 4; // 0x0010h
const BOOT_UP_REASON_SCAN_TRIG=    1 << 5; // 0x0020h
const BOOT_UP_REASON_SCAN_RST =    1 << 6; // 0x0040h
const BOOT_UP_REASON_CHRG_DET =    1 << 7; // 0x0080h
*/
// set this flag to disable the UART logging
const DEBUG_UART_ENABLED = 0;
debug_uart <- hardware.uart6E;
if (DEBUG_UART_ENABLED)
{
    debug_uart.configure(115200, 8, PARITY_NONE, 1, NO_CTSRTS|NO_RX);
}

const IMP_SERVER_LOG_ENABLED = 1;

// This NV persistence is only good for warm boot
// if we get a cold boot, all of this goes away
// If a cold persistence is required then we need to
// user the server.setpermanent() api
if (!("nv" in getroottable()))
{
    nv <- { 
            sleep_count = 0, 
            setup_required=true, 
            setup_count = 0,
            disconnect_reason=0, 
            sleep_not_allowed=false,
            boot_up_reason = 0,
            voltage_level = 0.0,
            sleep_duration = 0.0,
            extend_timeout = false
          };
}

if(!("setup" in getroottable()))
{
    setup <- {
                 ssid="",
                 pass="",
                 barcode_scanned=false,
                 time=0.0,
             }
}

// Get the Sleep Duration early on
if( nv.sleep_count != 0 )
{
    nv.sleep_duration = time() - nv.sleep_duration;
}

// Consts and enums
const cFirmwareVersion = "1.3.17" // Beta3 firmware starts with 1.3.00
const cButtonTimeout = 6;  // in seconds
const cDelayBeforeDeepSleepHome = 30.0;  // in seconds and just change this one
const cDelayBeforeDeepSleepFactory = 300.0;  // in seconds and just change this one
// The two variables below here are to use a hysteresis for the Accelerometer to stop
// moving, and if the accelerometer doesn’t stop moving within the cDelayBeforeAccelClear
// then we don’t go to sleep. Here is how it would work:
// 1. cActualDelayBeforeDeepSleep timer is kicked off
// 2. enters the sleep Handler when the timer expires
// 3. we set a timer for cDelayBeforeAccelClear and check for Acceleremoter
//    interrupts and if we are still receiving interrupts even after the timer expires
//    we simply don’t enter sleep
// 4. Otherwise if there are no more interrupts generated by the Accelerometer then
//    We enter sleep
local cActualDelayBeforeDeepSleep = cDelayBeforeDeepSleepHome - 2;
const cDeepSleepDuration = 86380.0;  // in seconds (24h - 20s)
const cDeepSleepInSetupMode = 2419180.0; // 28 days - 20seconds
const BLINK_UP_TIME = 600.0; // in seconds (10 minutes)

// This is the number of button presses required to enter blink up mode
const BLINK_UP_BUTTON_COUNT = 3;

const CONNECT_RETRY_TIME = 45; // for now 45 seconds retry time

const SETUP_BARCODE_PREFIX = "4H1KU5"

// use the factory BSSID to ensure scanning the special barcodes
// on the hiku box only works in the factory
// HACK
const FACTORY_BSSID = "20aa4b532731";

enum DeviceState
/*
                           ---> SCAN_CAPTURED ------>
                          /                          \
    IDLE ---> SCAN_RECORD ---> BUTTON_TIMEOUT -->     \
                          \                      \     \
                           -------------------> BUTTON_RELEASED ---> IDLE
*/
{
    IDLE,             // 0: Not recording or processing data
    SCAN_RECORD,      // 1: Scanning and recording audio
    SCAN_CAPTURED,    // 2: Processing scan data
    BUTTON_TIMEOUT,   // 3: Timeout limit reached while holding button
    BUTTON_RELEASED,  // 4: Button released, may have audio to send
    PRE_SLEEP,        // 5: A state before it enters Sleep just after being IDLE
}


// Globals
gDeviceState <- DeviceState.IDLE; // Hiku device current state; // Hiku device current state
local init_completed = false;

gAudioBufferOverran <- false; // True if an overrun occurred
gAudioChunkCount <- 0; // Number of audio buffers (chunks) captured
const gAudioBufferSize = 2000; // Size of each audio buffer 
const gAudioSampleRate = 8000; // in Hz

// Workaround to capture last buffer after sampler is stopped
gSamplerStopping <- false; 
gLastSamplerBuffer <- null; 
gLastSamplerBufLen <- 0; 
gAudioTimer <- 0;

gAccelInterrupted <- false;
gIsConnecting <- false;
gDeepSleepTimer <- null;

// Each 1k of buffer will hold 1/16 of a second of audio, or 63ms.
// A-law sampler does not return partial buffers. This means that up to 
// the last buffer size of data is dropped. Filed issue with IE here: 
// http://forums.electricimp.com/discussion/780/. So keep buffers small. 
buf1 <- blob(gAudioBufferSize);
buf2 <- blob(gAudioBufferSize);
buf3 <- blob(gAudioBufferSize);
buf4 <- blob(gAudioBufferSize);

// Device Setup Related functions
function determineSetupBarcode(barcode)
{
   // local patternString = format("\b%s\b",SETUP_BARCODE_PREFIX);
    local pattern = regexp(@"\b4H1KU");
    local res = pattern.search(barcode);
    local tempBarcode = barcode;
    log(format("Barcode to Match: %s",barcode));
    log("result: "+res);
    // result is null which means its not the setup barcode
    if( res == null)
    {
       log("regex didn't fint a setup barcode");
       return false;
    }
    
    // At this time we have a barcode that has either an ssid or a password
    // decode it by stripping the first character which identifies an ssid if its 5
    // identifies a password if its a 6
    
    local barcodeType = tempBarcode.slice(res.end, res.end+1);
    local setupCode = tempBarcode.slice(res.end+1, tempBarcode.len());
    
    if(barcodeType == "5")
    {
        // This is the SSID
        setup.ssid = setupCode;
    }
    else if( barcodeType == "6")
    {
        // This is the password
        setup.pass = setupCode;
    }
    
    
    log(" setupCode: "+setupCode+" type: "+barcodeType);
    
    if(setup.ssid !="" && setup.pass !="")
    {
       imp.wakeup(0.1 function(){
            ChangeWifi(setup.ssid, setup.pass);
            setup.ssid = setup.pass = "";
       });
    }
    
    return true;
}

function ChangeWifi(ssid, password) {
    log("device disconnecting");
    // wait for wifi buffer to empty before disconnecting
    server.flush(60);
    server.disconnect();
    
    // change the wificonfiguration and then reconnect
    imp.setwificonfiguration(ssid, password);
    server.connect();
    
    // log that we're connected to make sure it worked
    log("device reconnected to " + ssid);
}


//======================================================================
// Class to handle all the connection management and retry mechanisms
// This will self contain all the wifi connection establishment and retries

class ConnectionManager
{
    _connCb = array(2);
    numCb = 0;
    _retryTimer = null;
    
    constructor()
    {
    }
    
   function connect(callback, timeout)
   {
       // Check if we're connected before calling server.connect()
       // to avoid race condition
  
      if (server.isconnected()) 
      {
         log("connect called, but we are already connected");
         gIsConnecting = false;
         // We're already connected, so execute the callback
         callback(SERVER_CONNECTED);
      } 
      else 
      {
         // Otherwise, proceed as normal
         log("connect called!!");
         server.connect(callback, timeout);
      }
    }   
    
    function registerCallback(func)
    {
        if( numCb > _connCb.len() )
        {
            _connCb.resize(numCb+2);
        }
        
        _connCb[numCb++] = func;
    }
    
    function init_connections()
    {
        //hwPiezo.playSound("no-connection");
        server.onunexpecteddisconnect(onUnexpectedDisconnect.bindenv(this));
        server.onshutdown(onShutdown.bindenv(this));
        //connect(onConnectedResume.bindenv(this), CONNECT_RETRY_TIME)
        tryToConnect();
    }
    
    function notifyConnectionStatus(status)
    {
        local i = 0;
        
        log(format("Notifying Connection Status: %d",status));
        
        for( i = 0; i < numCb; i++ )
        {
            _connCb[i](status);
        }
    }
    

    //********************************************************************
    // This is to make sure that we wake up and start trying to connect on the background
    // only time we would get into onConnected is when we have a connection established
    // otherwise its going to beep left and right which is nasty!
    function onConnectedResume(status)
    {
        if( status != SERVER_CONNECTED )
        {
            nv.disconnect_reason = status;
            //imp.wakeup(2, tryToConnect.bindenv(this) );
            //hwPiezo.playSound("no-connection");
            connection_available = false;
        }
        else
        {
            connection_available = true;
            gIsConnecting = false;
            notifyConnectionStatus(status);
        }
    }

    function tryToConnect()
    {
            if (_retryTimer )
        {
          imp.cancelwakeup(_retryTimer);
        }
        if (!server.isconnected() ) {
            gIsConnecting = true;
            log("Trying to reconnect!!");
            connect(onConnectedResume.bindenv(this), CONNECT_RETRY_TIME);
            _retryTimer = imp.wakeup(CONNECT_RETRY_TIME+2, tryToConnect.bindenv(this));
        }
        else
        {
            log("Trying to reconnect called but fell in the else block");
            onConnectedResume(SERVER_CONNECTED);
        }
    }

    function onUnexpectedDisconnect(status)
    {
        log(format("onUnexpectedDisconnect: %d",status));
        nv.disconnect_reason = status;
        connection_available = false;
        notifyConnectionStatus(status);
        if( !gIsConnecting )
        {
              imp.wakeup(0.5, tryToConnect.bindenv(this));
        }
    }
    

    function onShutdown(status)
    {
        agentSend("shutdownRequestReason", status);
        if((status == SHUTDOWN_NEWSQUIRREL) || (status == SHUTDOWN_NEWFIRMWARE))
        {
            hwPiezo.playSound("software-update");
            imp.wakeup(2, function(){
                server.restart();
            });
        }
        else
        {
            server.restart();
        }
    }       
}


//======================================================================
// Class to handle all the Interrupts and Call Backs
class InterruptHandler
{
    // Having a static interrupt handler object as a singleton will be
    // better to handle all the IOExpander classes interrupts one this one object
    irqCallbacks = array(2); // start with this for now
    i2cDevice = null;
  
    // Want to keep the constructor private or protected so that it can only
    // be initialized by the getInstance
    constructor(numFuncs, i2cDevice)
    {
        //gInitTime.inthandler = hardware.millis();
        this.irqCallbacks.resize(numFuncs);
          this.i2cDevice = i2cDevice;
        // Disable "Autoclear NINT on RegData read". This 
        // could cause us to lose accelerometer interrupts
        // if someone reads or writes any pin between when 
        // an interrupt occurs and we handle it. 
        i2cDevice.write(0x10, 0x01); // RegMisc

        // Lower the output buffer drive, to reduce current consumption
        i2cDevice.write(0x02, 0xFF); // RegLowDrive          
        //log("--------Setting interrupt handler for pin1--------");
        hardware.pin1.configure(DIGITAL_IN_WAKEUP, handlePin1Int.bindenv(this));
        //gInitTime.inthandler = hardware.millis() - gInitTime.inthandler;
    }
  
      // Set an interrupt handler callback for a particular pin
    function setIrqCallback(pin, func)
    {
        if( pin > irqCallbacks.len() )
        {
          // someone tried to add a call back function to a pin that is greater
          // than the size of the array
          return;
        }
        irqCallbacks[pin] = func;
    }
    
    
    function clearHandlers()
    {
        for (local i = 0; i < irqCallbacks.len(); i++) {
            irqCallbacks[i] = null;
        }
    }   

    // Handle all expander callbacks
    function handlePin1Int()
    {
        local regInterruptSource = 0;
        local reg = 0;
        
        local pinState = hardware.pin1.read();

        // Get the active interrupt sources
        // Keep reading the interrupt source register and clearing 
        // interrupts until it reads clean.  This catches any interrupts
        // that occur between reading and clearing. 
        
        
        //log(format("handlePin1Int: entry time=%d ms, hardware.pin1=%d", hardware.millis(),pinState));
        if(0 == pinState)
        {
            //log(format("handlePin1Int: fallEdge time=%d ms, hardware.pin1=%d", hardware.millis(),pinState));
            return;
        }
        
        while (reg = i2cDevice.read(0x0C)) // RegInterruptSource
        {
            clearAllIrqs();
            regInterruptSource = regInterruptSource | reg;
        }
        //log("handlePin1Int after int sources time: " + hardware.millis() + "ms");


        // If no interrupts, just return. This occurs on every 
        // pin 1 falling edge. 
        if (!regInterruptSource) 
        {
            //log(format("handlePin1Int: fallEdge time=%d ms, hardware.pin1=%d", hardware.millis(),hardware.pin1.read()));
            return;
        }

        //printRegister(0x0C, "INTERRUPT");

        // Call the interrupt handlers for all active interrupts
        for(local pin=0; pin < 8; pin++){
            if(regInterruptSource & (1 << pin)){
                //log(format("-Calling irq callback for pin %d", pin));
                nv.boot_up_reason = nv.boot_up_reason | (1 << pin);
                if (irqCallbacks[pin]) irqCallbacks[pin]();
            }
        }
       // log("handlePin1Int exit time: " + hardware.millis() + "ms");
    } 
    
    // Clear all interrupts.  Must do this immediately after
    // reading the interrupt register in the handler, otherwise
    // we may get other interrupts in between and miss them. 
    function clearAllIrqs()
    {
        i2cDevice.write(0x0C, 0xFF); // RegInterruptSource
    }
    
    function getI2CDevice()
    {
        return this.i2cDevice;
    } 
  
}


//======================================================================
// Handles all audio output
class Piezo
{
    // The hardware pin controlling the piezo 
    pin = null;
    
    page_device = false;
    pageToneIdx=0;
        
    // In Squirrel, if you initialize a member array or table, all
    // instances will point to the same one.  So init in the constructor.
    tonesParamsList = {};

    // State for playing tones asynchronously
    currentToneIdx = 0;
    currentTone = null;

    // Audio generation constants
    static noteB4 = 0.002025; // 494 Hz 
    static noteE5 = 0.001517; // 659 Hz
    static noteE6 = 0.000759; // 1318 Hz
    static dc = 0.5; // 50% duty cycle, maximum power for a piezo
    static longTone = 0.2; // duration in seconds
    static shortTone = 0.15; // duration in seconds
        // rmk experimenting with a new extrashort tone
    static extraShortTone = 0.1; // duration in seconds

    //**********************************************************
    constructor(hwPin)
    {
        //gInitTime.piezo = hardware.millis();
        pin = hwPin;
        
    disable();

        tonesParamsList = {
            // [[period, duty cycle, duration], ...]
            // rmk messing with the tones, these were rajan's originals
            //"success": [[noteE5, 0.15, longTone], [noteE6, 0.85, shortTone]],
            //"success-local": [[noteE5, 0.15, longTone]],
            //"start-local": [[noteE6, 0.15, longTone]],
            //"success-server": [[noteE6, 0.85, shortTone]],
            "success": [[noteE5, 0.15, longTone], [noteE6, 0.85, shortTone]],
            "success-local": [[noteE5, dc, longTone]],
            "start-local": [[noteE5, 0.15, longTone]],
            "success-server": [[noteE6, 0.85, shortTone]],

            // rmk these were from rob_audio_test
            //"success": [[noteE5, dc, longTone], [noteE6, dc, shortTone]],
            //"success-local": [[noteE5, dc, longTone]],
            //"success-server": [[noteE6, dc, shortTone]],

            
            "failure": [[noteB4, 0.85, shortTone]],
            "unknown-upc": [[noteB4, 0.85, shortTone], [noteB4, 0, shortTone], 
            [noteB4, 0.85, shortTone], [noteB4, 0, shortTone], 
            [noteB4, 0.85, shortTone], [noteB4, 0, shortTone]],
            "": [/*silence*/],
            "timeout":  [/*silence*/],
            "startup": [[noteB4, 0.85, longTone], [noteE5, 0.15, shortTone]],
            "charger-removed": [[noteE5, 0.15, shortTone], [noteB4, 0.85, longTone]],
            "charger-attached": [[noteB4, 0.85, longTone], [noteE5, 0.15, shortTone]],
            "device-page": [[noteB4, 0.85, shortTone],[noteB4, 0, longTone]],
            // rmk modified the no-connection to a double beep and reduced time to the new extraShortTone
            "no-connection": [[noteB4, 0.85, extraShortTone], [noteB4, 0, extraShortTone], [noteB4, 0.85, extraShortTone], [noteB4, 0, extraShortTone]],
            "blink-up-enabled": [[noteE5, 0, shortTone], [noteB4, 0.85, longTone]],
            "software-update": [[noteB4, 0.85, shortTone], [noteE5, 0, extraShortTone], [noteE5, 0.85, shortTone], [noteB4, 0, extraShortTone]]
        };

        //gInitTime.piezo = hardware.millis() - gInitTime.piezo;
    }
    
    function disable()
    {
    pin.write(0);
        pin.configure(DIGITAL_OUT);
    pin.write(0);
    }
    
    // utility futimeoutnction to validate that the tone is present
    // and it is not a silent tone
    function validate_tone( tone )
    {
        // Handle invalid tone values
        if (!(tone in tonesParamsList))
        {
            log(format("Error: unknown tone \"%s\"", tone));
            return false;
        }

        // Handle "silent" tones
        if (tonesParamsList[tone].len() == 0)
        {
            return false;
        } 
        return true;   
    }    
    /*
    function isPaging()
    {
        return page_device;
    }
    
    function stopPageTone()
    {
        page_device = false;
    }
    
    function playPageTone()
    {
        if( !validate_tone("device-page"))
        {
            return;
        }
        
        page_device = true;
        
        // Play the first note
        local params = tonesParamsList["device-page"][0];
        pin.configure(PWM_OUT, params[0], params[1]);
            
        // Play the next note after the specified delay
        pageToneIdx = 1;
        imp.wakeup(params[2], continuePageTone.bindenv(this));      
        
    }
    
    // Continue playing the device page tone until a button is pressed
    function continuePageTone()
    {
        // Turn off the previous note
        pin.write(0);
        
        if( !page_device )
        {
            return;
        }

        // Play the next note, if any
        if (tonesParamsList["device-page"].len() > pageToneIdx)
        {
            local params = tonesParamsList["device-page"][pageToneIdx];
            pin.configure(PWM_OUT, params[0], params[1]);

            pageToneIdx++;
            imp.wakeup(params[2], continuePageTone.bindenv(this));
        }
        else 
        {
            pageToneIdx = 0;
            if( page_device )
            {
                playPageTone();
            }
        }
    }
    */

    //**********************************************************
    // Play a tone (a set of notes).  Defaults to asynchronous
    // playback, but also supports synchronous via busy waits
    function playSound(tone = "success", async = true) 
    {

        if( !validate_tone( tone ) )
        {
            return;
        }

        if (async)
        {
            // Play the first note
            local params = tonesParamsList[tone][0];
            pin.configure(PWM_OUT, params[0], params[1]);
            // Play the next note after the specified delay
            currentTone = tone;
            currentToneIdx = 1;
            imp.wakeup(params[2], _continueSound.bindenv(this));
        }
        else 
        {
            // Play synchronously
            foreach (params in tonesParamsList[tone])
            {
                pin.configure(PWM_OUT, params[0], params[1]);
                imp.sleep(params[2]);
            }
            pin.write(0);
        }
    }
        
    //**********************************************************
    // Continue playing an asynchronous sound. This is the 
    // callback that plays all notes after the first. 
    function _continueSound()
    {
        // Turn off the previous note
        pin.write(0);

        // This happens when playing more than one tone concurrently, 
        // which can happen if you scan again before the first tone
        // finishes.  Long term solution is to create a queue of notes
        // to play. 
        if (currentTone == null)
        {
            log("Error: tried to play null tone");
            return;
        }

        // Play the next note, if any
        if (tonesParamsList[currentTone].len() > currentToneIdx)
        {
            local params = tonesParamsList[currentTone][currentToneIdx];
           // local params1 = tonesParamsList[currentTone][currentToneIdx-1];
            pin.configure(PWM_OUT, params[0], params[1]);

            currentToneIdx++;
            imp.wakeup(params[2], _continueSound.bindenv(this));
        }
        else 
        {
            currentToneIdx = 0;
            currentTone = null;
        }
    }
}


//======================================================================
// Timer that can be canceled and executes a function when expiring
// Now that Electric Imp provides a timer handle each time you set a
// Timer, the CancellableTimer is now constructed to wake up for the set
// timer value instead of doing 0.5 seconds wakeup and checking for elapsed time
// This method significantly reduces the amount of timer interrupts fired
//
// New Method:
// If a timer object is created and enabled then it would use the duration to set the timer
// and retain the handle for it.  When the timer fires, it would call the action function
// if a timer needs to be cancelled, just call the disable function and it would disable the
// timer and set the handle to null.

class CancellableTimer
{
    actionFn = null; // Function to call when timer expires
    _timerHandle = null;
    duration = 0.0;

    //**********************************************************
    // Duration in seconds, and function to execute
    constructor(secs, func)
    {
        duration = secs;
        actionFn = func;
    }

    //**********************************************************
    // Start the timer
    // If the _timerHandle is null then no timer pending for this object
    // just create a timer and set it
    function enable() 
    {
        log("Timer enable called");
        
        if(_timerHandle)
        {
          disable();
        }
        _timerHandle = imp.wakeup(duration,_timerCallback.bindenv(this));
    }

    //**********************************************************
    // Stop the timer
    // If the timer handle is not null then we have a pending timer, just cancel it
    // and set the handle to null
    function disable() 
    {
        log("Timer disable called!");
        // if the timerHandle is not null, then the timer is enabled and active
        if(_timerHandle)
        {
          //just cancel the wakeup timer and set the handle to null
          imp.cancelwakeup(_timerHandle);
          _timerHandle = null;
          log("Timer canceled wakeup!");
        }
    }
    
    //**********************************************************
    // Set new time for the timer
    // Expectation is that if an existing timer is pending
    // then the it needs to be disabled prior to setting the duration
    // Pre-Condition: timer is not running
    // Post-Condition: Timer is enabled
    function setDuration(secs) 
    {
        duration = secs;
    }
        

    //**********************************************************
    // Internal function to manage cancelation and expiration
    function _timerCallback()
    {
        log("timer fired!");
        actionFn();
        _timerHandle = null;
    }
}


//======================================================================
// Handles any I2C device
class I2cDevice
{
    i2cPort = null;
    i2cAddress = null;

    constructor(port, address)
    {
        if(port == I2C_12)
        {
            // Configure I2C bus on pins 1 & 2
            hardware.configure(I2C_12);
            i2cPort = hardware.i2c12;
        }
        else if(port == I2C_89)
        {
            // Configure I2C bus on pins 8 & 9
            hardware.configure(I2C_89);
            i2cPort = hardware.i2c89;
        }
        else
        {
            log(format("Error: invalid I2C port specified: %c", port));
        }

        // Use the fastest supported clock speed
        i2cPort.configure(CLOCK_SPEED_400_KHZ);

        // Takes a 7-bit I2C address
        i2cAddress = address << 1;
    }

    // Read a byte
    function read(register)
    {
        local data = i2cPort.read(i2cAddress, format("%c", register), 1);
        if(data == null)
        {
            log("Error: I2C read failure");
            // TODO: this should return null, right??? Do better handling.
            // TODO: print the i2c address as part of the error
            return -1;
        }

        return data[0];
    }
    
    function disable()
    {
        hardware.pin8.configure(DIGITAL_IN_PULLUP);
        hardware.pin9.configure(DIGITAL_IN_PULLUP);
    }

    // Write a byte
    function write(register, data)
    {
        if( i2cPort.write(i2cAddress, format("%c%c", register, data)) != 0)
        {
            log(format("Error: I2C write failure on register=%04x",register));
        }
    }

}


//======================================================================
// Handles the SX1508 GPIO expander
class IoExpanderDevice
{

    intHandler = null;

    constructor(intHandler)
    {
        //base.constructor(port, address);
        this.intHandler = intHandler;

    }
    
    function getIntHandler()
    {
        return this.intHandler;
    }

    // Write a bit to a register
    function writeBit(register, bitn, level)
    {
        local value = intHandler.getI2CDevice().read(register);
        value = (level == 0)?(value & ~(1<<bitn)):(value | (1<<bitn));
        intHandler.getI2CDevice().write(register, value);
    }

    // Write a masked bit pattern
    function writeMasked(register, data, mask)
    {
        local value = intHandler.getI2CDevice().read(register);
        value = (value & ~mask) | (data & mask);
        intHandler.getI2CDevice().write(register, value);
    }

    // Get a GPIO input pin level
    function getPin(gpio)
    {
        return (intHandler.getI2CDevice().read(0x08)&(1<<(gpio&7)))?1:0;
    }

    // Set a GPIO level
    function setPin(gpio, level)
    {
        writeBit(0x08, gpio&7, level?1:0);
    }

    // Set a GPIO direction
    function setDir(gpio, input)
    {
        writeBit(0x07, gpio&7, input?1:0);
    }

    // Set a GPIO internal pull up
    function setPullUp(gpio, enable)
    {
        writeBit(0x03, gpio&7, enable);
    }

    // Set a GPIO internal pull down
    function setPullDown(gpio, enable)
    {
        writeBit(0x04, gpio&7, enable);
    }

    // Set GPIO interrupt mask
    // "0" means disable interrupt, "1" means enable (opposite of datasheet)
    function setIrqMask(gpio, enable)
    {
        writeBit(0x09, gpio&7, enable?0:1); 
    }

    // Set GPIO interrupt edges
    function setIrqEdges(gpio, rising, falling)
    {
        local addr = 0x0B - (gpio>>2);
        local mask = 0x03 << ((gpio&3)<<1);
        local data = (2*falling + rising) << ((gpio&3)<<1);
        writeMasked(addr, data, mask);
    }
}


//======================================================================
// Device state machine 

//**********************************************************************
function updateDeviceState(newState)
{
    // Update the state 
    local oldState = gDeviceState;
    gDeviceState = newState;


    // If we are transitioning to idle, start the sleep timer. 
    // If transitioning out of idle, clear it.
    if (newState == DeviceState.IDLE)
    {
        if (gDeepSleepTimer)
        {
          gDeepSleepTimer.disable();
          gDeepSleepTimer.enable();
        }
    }
    else
    {
        // Disable deep sleep timer
        if (gDeepSleepTimer)
        {
          gDeepSleepTimer.disable();
          gAccelHysteresis.disable();
        }
    }

    // If we are transitioning to SCAN_RECORD, start the button timer. 
    // If transitioning out of SCAN_RECORD, clear it. The reason 
    // we don't time the actual button press is that, if we have 
    // captured a scan, we don't want to abort.
    if (newState == DeviceState.SCAN_RECORD)
    {
        if (oldState != DeviceState.SCAN_RECORD)
        {
            // Start timing button press
            gButtonTimer.enable();
        }
    }
    else
    {
        // Stop timing button press
        gButtonTimer.disable();
    }

    // Log the state change, for debugging
    /*
    local os = (oldState==null) ? "null" : oldState.tostring();
    local ns = (newState==null) ? "null" : newState.tostring();
    log(format("State change: %s -> %s", os, ns));
    */
    // Verify state machine is in order 
    switch (newState) 
    {
        case DeviceState.IDLE:
            assert(oldState == DeviceState.BUTTON_RELEASED ||
                   oldState == DeviceState.PRE_SLEEP ||
                   oldState == DeviceState.IDLE ||
                   oldState == null);
            break;
        case DeviceState.SCAN_RECORD:
            assert(oldState == DeviceState.IDLE ||
                   oldState == DeviceState.PRE_SLEEP );
            break;
        case DeviceState.SCAN_CAPTURED:
            assert(oldState == DeviceState.SCAN_RECORD);
            break;
        case DeviceState.BUTTON_TIMEOUT:
            assert(oldState == DeviceState.SCAN_RECORD);
            break;
        case DeviceState.BUTTON_RELEASED:
            assert(oldState == DeviceState.SCAN_RECORD ||
                   oldState == DeviceState.SCAN_CAPTURED ||
                   oldState == DeviceState.BUTTON_TIMEOUT);
            break;
        case DeviceState.PRE_SLEEP:
            assert( oldState == DeviceState.IDLE ||
                    oldState == DeviceState.PRE_SLEEP);
            break;
        default:
            assert(false);
            break;
    }
}


//======================================================================
// Scanner
class Scanner
{
    pin = null; // IO expander pin assignment (trigger)
    reset = null; // IO expander pin assignment (reset)
    scannerOutput = "";  // Stores the current barcode characters
    

    constructor(triggerPin, resetPin)
    {   
        //gInitTime.scanner = hardware.millis();

        // Save assignments
        pin = triggerPin;
        reset = resetPin;

        // Reset the scanner at each boot, just to be safe
        ioExpander.setDir(reset, 0); // set as output
        ioExpander.setPullUp(reset, 0); // disable pullup
        ioExpander.setPin(reset, 0); // pull low to reset
        imp.sleep(0.001); // wait for x seconds
        ioExpander.setPin(reset, 1); // pull high to boot
        imp.sleep(0.001);

        // Configure trigger pin as output
        ioExpander.setDir(pin, 0); // set as output
        ioExpander.setPullUp(pin, 0); // disable pullup
        ioExpander.setPin(pin, 1); // pull high to disable trigger

        // Configure scanner UART (for RX only)
    // WARNING: Ensure pin5 is never accidentally configured as a UART TX output
    // and driven high. This triggers the buzzer and can cause device crashes
        // on a low battery.    
        hardware.uart57.configure(38400, 8, PARITY_NONE, 1, NO_CTSRTS | NO_TX, 
                                 scannerCallback.bindenv(this));
        //gInitTime.scanner = hardware.millis() - gInitTime.scanner;
    }

    // Disable for low power sleep mode
    function disable()
    {
        ioExpander.setPin(reset, 0); // pull reset low 
        ioExpander.setPin(pin, 0); // pull trigger low 
        hardware.uart57.disable();
        hardware.pin7.configure(DIGITAL_IN_PULLUP);
        hardware.pin2.configure(DIGITAL_IN_PULLUP);
        
    }

    function readTriggerState()
    {
        return ioExpander.getPin(pin);
    }

    function trigger(on)
    {
        if (on)
        {
            ioExpander.setPin(pin, 0);
        }
        else
        {
            ioExpander.setPin(pin, 1);
        }
    }

    //**********************************************************************
    // Start the scanner and sampler
    function startScanRecord() 
    {
        scannerOutput = "";
        // Trigger the scanner
        hwScanner.trigger(true);

        // Trigger the mic recording
        gAudioBufferOverran = false;
        gAudioChunkCount = 0;
        gLastSamplerBuffer = null; 
        gLastSamplerBufLen = 0; 
        agent.send("startAudioUpload", "");
        hardware.sampler.start();
    }

    //**********************************************************************
    // Stop the scanner and sampler
    // Note: this function may be called multiple times in a row, so
    // it must support that. 
    function stopScanRecord()
    {
        // Stop mic recording
        hardware.sampler.stop();

        // Release scanner trigger
        hwScanner.trigger(false);

        // Reset for next scan
        scannerOutput = "";
    }

    //**********************************************************************
    // Scanner data ready callback, called whenever there is data from scanner.
    // Reads the bytes, and detects and handles a full barcode string.
    function scannerCallback()
    {
        // Read the first byte
        local data = hardware.uart57.read();
        while (data != -1)  
        {
            //log("char " + data + " \"" + data.tochar() + "\"");

            // Handle the data
            switch (data) 
            {
                case '\n':
                    // Scan complete. Discard the line ending,
                    // upload the beep, and reset state.

                    // If the scan came in late (e.g. after button up), 
                    // discard it, to maintain the state machine. 
                    if (gDeviceState != DeviceState.SCAN_RECORD)
                    {
                        /*
                        log(format(
                                   "Got capture too late. Dropping scan %d",
                                   gDeviceState)); */
                        scannerOutput = "";
                        return;
                    }
                    updateDeviceState(DeviceState.SCAN_CAPTURED);
                    log("Code: \"" + scannerOutput + "\" (" + 
                               scannerOutput.len() + " chars)");
                    //determineSetupBarcode(scannerOutput);
                    if(0!= agent.send("uploadBeep", {
                                              scandata=scannerOutput,
                                              scansize=scannerOutput.len(),
                                              serial=hardware.getdeviceid(),
                                              fw_version=cFirmwareVersion,
                                              linkedrecord="",
                                              audiodata="",
                                             }))
                    {

                    }
                    else
                    {
                        hwPiezo.playSound("success-local");
                    }
                    
                    // Stop collecting data
                    stopScanRecord();
                    break;

                case '\r':
                    // Discard line endings
                    break;

                default:
                    // Store the character
                    scannerOutput = scannerOutput + data.tochar();
                    break;
            }

            // Read the next byte
            data = hardware.uart57.read();
        } 
    }
}


//======================================================================
// Button
enum ButtonState
{
    BUTTON_UP,
    BUTTON_DOWN,
}

class PushButton
{
    pin = null; // IO expander pin assignment
    buttonState = ButtonState.BUTTON_UP; // Button current state
    
    buttonPressCount = 0;
    previousTime = 0;
    blinkTimer = null;
    
    connection = false;

    // WARNING: increasing these can cause buffer overruns during 
    // audio recording, because this the button debouncing on "up"
    // happens before the audio sampler buffer is serviced. 
    //static numSamples = 5; // For debouncing
   // static sleepSecs = 0.004;  // For debouncing

    constructor(btnPin)
    {   
        //gInitTime.button = hardware.millis();
        
        // Save assignments
        pin = btnPin;

        // Set event handler for IRQ
        intHandler.setIrqCallback(btnPin, buttonCallback.bindenv(this));
        connMgr.registerCallback(connectionStatusCb.bindenv(this));

        // Configure pin as input, IRQ on both edges
        ioExpander.setDir(pin, 1); // set as input
        ioExpander.setPullUp(pin, 1); // enable pullup
        ioExpander.setIrqMask(pin, 1); // enable IRQ
        ioExpander.setIrqEdges(pin, 1, 1); // rising and falling
        
        blinkTimer = CancellableTimer(BLINK_UP_TIME, this.cancelBlinkUpTimer.bindenv(this));
        
        connection = connection_available;
        
        //gInitTime.button = hardware.millis() - gInitTime.button;
    }
    
    function connectionStatusCb(status)
    {
        connection = (status == SERVER_CONNECTED);
        if((connection) && ( buttonState == ButtonState.BUTTON_DOWN ) )
        {
            updateDeviceState(DeviceState.SCAN_RECORD);
            buttonState = ButtonState.BUTTON_DOWN;
            //log("Button state change: DOWN");
            hwScanner.startScanRecord();            
        }
    }

    function readState()
    {
        return ioExpander.getPin(pin);
    }

    //**********************************************************************
    // If we are gathering data and the button has been held down 
    // too long, we abort recording and scanning.
    function handleButtonTimeout()
    {
        updateDeviceState(DeviceState.BUTTON_TIMEOUT);
        hwScanner.stopScanRecord();
        if (server.isconnected()){
            agent.send("buttonTimeout", {instantonTimeout=0});
        }            
        hwPiezo.playSound("timeout");
        log("Timeout reached. Aborting scan and record.");
    }

    //**********************************************************************
    // Button handler callback 
    // Not a true interrupt handler, this cannot interrupt other Squirrel 
    // code. The event is queued and the callback is called next time the 
    // Imp is idle.
    function buttonCallback()
    {
        // Sample the button multiple times to debounce. Total time 
        // taken is (numSamples-1)*sleepSecs
        local state = readState();
        local curr_time, delta;
        

        imp.sleep(0.020);
        state += readState();

        //log("buttonCallBack entry time: " + hardware.millis() + "ms");

        // Handle the button state transition
        switch(state) 
        {
            case 0:
                /*
                // Button in held state
                if( hwPiezo.isPaging() )
                {
                    hwPiezo.stopPageTone();
                }
                */
                
                // The logic below is to ensure
                // that we are able to enter
                // blink-up state with BLINK_UP_BUTTON_COUNT quick button presses
                curr_time = hardware.millis();
                local prv_time = previousTime;
                previousTime = curr_time;
                delta = curr_time - prv_time;
                buttonPressCount = ( delta <= 300 )?++buttonPressCount:0;
                
                if ((BLINK_UP_BUTTON_COUNT-1 == buttonPressCount))
                {
                    blinkUpDevice_internal(true,true);
                    buttonPressCount = 0;
                    return;
                }
                
                if( delta <= 300 )
                {
                    return;
                }
                
                //log(format("buttonPressCount=%d",buttonPressCount));                
                
                if (buttonState == ButtonState.BUTTON_UP)
                {
                    if(!connection)
                    {
                        // Here we play the no connection sound and return from the state machine
                        if( !nv.setup_required )
                        {
                            hwPiezo.playSound("no-connection");
                        }
                        buttonState = ButtonState.BUTTON_DOWN;
                        return;
                    }
                    agentSend("button","Pressed");
                    updateDeviceState(DeviceState.SCAN_RECORD);
                    buttonState = ButtonState.BUTTON_DOWN;
                    //log("Button state change: DOWN");
                    hwScanner.startScanRecord();
                }
        else
        {
            buttonState = ButtonState.BUTTON_DOWN;
        }
                
                break;
            case 2:
                // Button in released state
                if (buttonState == ButtonState.BUTTON_DOWN)
                {
                    log("BUTTON RELEASED!");
                    agentSend("button","Released");
                    buttonState = ButtonState.BUTTON_UP;
                    //log("Button state change: UP");
                    
                    if( !connection )
                    {
                        return;
                    }
                    
                    local oldState = gDeviceState;
                    updateDeviceState(DeviceState.BUTTON_RELEASED);

                    if (oldState == DeviceState.SCAN_RECORD)
                    {
                        // Audio captured. Stop sampling and send it. 
                        // Note that we only call sendLastBuffer in
                        // the case that we want to capture the audio, 
                        // so it cannot be inside stopScanRecord, which 
                        // is called in multiple places. 
                        // We have two uses of imp.onidle(), one during 
                        // the IDLE state and one when not idle.  They 
                        // must be kept separate, as only one onidle 
                        // callback is supported at a time. 
                        gSamplerStopping = true;
                        imp.onidle(sendLastBuffer); 
                        hwScanner.stopScanRecord();
                    }
                    // No more work to do, so go to idle
                    updateDeviceState(DeviceState.IDLE);
                }
                break;
            default:
                // Button is in transition (not settled)
                //log("Bouncing! " + buttonState);
                break;
        }
        //log("buttonCallBack exit time: " + hardware.millis() + "ms");
    }
    
    function blinkUpDevice_internal(blink=false, sound=false)
    {
        if( blink )
        {
            if(sound)
            {
                hwPiezo.playSound("blink-up-enabled");
            }
            //Enable the 5 minute Timer here
            // Ensure that we only enable it for the setup_required case
            if( !server.isconnected())
            {
                nv.setup_required = true;
                nv.sleep_not_allowed = true;
                blinkTimer.disable();
                blinkTimer.enable();
            }
        }     
    }
    
    function blinkUpDevice(blink=false)
    {
        blinkUpDevice_internal(blink,false);
        log(format("Blink-up: %s.",blink?"enabled":"disabled"));
    }
    
    function cancelBlinkUpTimer()
    {
        nv.sleep_not_allowed = false;
    }
}


//======================================================================
// Charge status pin
class ChargeStatus
{
    pin = null; // IO expander pin assignment
    previous_state = false; // the previous state of the charger
    pinStatus = null; // IO Expander Pin 7 for Charger Status

    constructor(chargePin)
    {
        // Save assignments
        pin = chargePin;
        pinStatus = 7;

        // Set event handler for IRQ
        intHandler.setIrqCallback(pin, chargerCallback.bindenv(this));
        intHandler.setIrqCallback(pinStatus, chargerDetectionCB.bindenv(this));
        
        hardware.pinB.configure(ANALOG_IN);
        imp.wakeup(5, batteryMeasurement.bindenv(this));

        // Configure pin as input, IRQ on both edges
        ioExpander.setDir(pin, 1); // set as input
        ioExpander.setPullUp(pin, 1); // enable pullup
        ioExpander.setIrqMask(pin, 1); // enable IRQ
        ioExpander.setIrqEdges(pin, 1, 1); // rising and falling
        
        chargerCallback(); // this will update the current state right away
        
        ioExpander.setDir(pinStatus, 1); // set as input
        ioExpander.setPullUp(pinStatus, 1); // enable pullup
        ioExpander.setIrqMask(pinStatus, 1); // enable IRQ
        ioExpander.setIrqEdges(pinStatus, 1, 1); // rising and falling

        // Congiure Pin C which is supposed to be the pin indicating whether a charger is
        // attached or not
        //hardware.pinC.configure(DIGITAL_IN_PULLUP);
        //agent.send("chargerState", previous_state); // update the charger state
        //gInitTime.charger = hardware.millis() - gInitTime.charger;
    }
    

    function readState()
    {
        return ioExpander.getPin(pin);
    }

    function isCharging()
    {
        if(ioExpander.getPin(pin))
        {
            return false;
        }
        return true;
    }
    
    function batteryMeasurement()
    {
        local raw_read = 0.0;
        
        for(local i = 0; i < 10; i++)
        {
          raw_read += hardware.pinB.read();
        }
        
        raw_read = (raw_read / 10.0);
        nv.voltage_level = raw_read;
        
        // every 15 seconds wake up and read the battery level
        // TODO: change the period of measurement so that it doesn’t drain the
        // battery
        log(format("Battery Level: %d, Input Voltage: %.2f", nv.voltage_level, hardware.voltage()));
        imp.wakeup(1, function() {
            agentSend("batteryLevel", nv.voltage_level)
        });
        imp.wakeup(60, batteryMeasurement.bindenv(this));
    }
    
    function chargerDetectionCB()
    {
        // the pin is high charger is attached and low is a removal
    local status = ioExpander.getPin(7)? "disconnected":"connected";
        log(format("USB Detection CB: %s", status));
        log(format("USB Detection CB: %s", status));
    agentSend("usbState",status);
    }

    //**********************************************************************
    // Charge status interrupt handler callback 
    function chargerCallback()
    {
        local charging = 0;
        
        charging = isCharging()?1:0;
        
        //Total time taken is (numSamples-1)*sleepSecs
        for (local i=1; i<5; i++)
        {
            charging += isCharging()?1:0;
        }
        log(format("Charger: %s",charging?"charging":"not charging"));
        
        if( previous_state != (charging==0?false:true))
        {
            hwPiezo.playSound(previous_state?"charger-attached":"charger-removed");
        }
        
        previous_state = (charging==0)? false:true; // update the previous state with the current state
        agentSend("chargerState", previous_state); // update the charger state
        log(format("USB Detection: %s", ioExpander.getPin(7)? "disconnected":"connected"));
    }
}

//======================================================================
// 3.3 volt switch pin for powering most peripherals
/*
class Switch3v3Accessory
{
    pin = null; // IO expander pin assignment

    constructor(switchPin)
    {

        // Save assignments
        pin = switchPin;

        // Configure pin 
        ioExpander.setDir(pin, 0); // set as output
        ioExpander.setPullUp(pin, 0); // disable pullup
        ioExpander.setPin(pin, 0); // pull low to turn switch on
    }

    function readState()
    {
        return ioExpander.getPin(pin);
    }

    function enable()
    {
        ioExpander.setPin(pin, 0);
    }

    function disable()
    {
        ioExpander.setPin(pin, 1);
    }
}
*/

//======================================================================
// Sampler/Audio In

//**********************************************************************
// Agent callback: upload complete
agent.on("uploadCompleted", function(result) {
    //log("uploadCompleted response");
    hwPiezo.playSound(result);
});

/*
agent.on("devicePage", function(result){
    hwPiezo.playPageTone();
});*/

agent.on("stayAwake" function(result){
  server.log("stayAwake called!!");
  nv.extend_timeout = result;
});


//**********************************************************************
// Process the last buffer, if any, and tell the agent we are done. 
// This function is called after sampler.stop in a way that 
// ensures we have captured all sampled buffers. 
function sendLastBuffer()
{
    // Send the last chunk to the server, if there is one
    if (gLastSamplerBuffer != null && gLastSamplerBufLen > 0)
    {
        agent.send("uploadAudioChunk", {buffer=gLastSamplerBuffer, 
                   length=gLastSamplerBufLen});
    }

    // If there are less than x secs of audio, abandon the 
    // recording. Else send the beep!
    local secs = gAudioChunkCount*gAudioBufferSize/
                       gAudioSampleRate.tofloat();

    //Because we cannot guarantee network robustness, we allow 
    // uploads even if an overrun occurred. Worst case it still
    // fails to reco, and you'll get an equivalent error. 
    //if (secs >= 0.4 && !gAudioBufferOverran)
    if (secs >= 0.4)
    {
        if(agent.send("endAudioUpload", {
                                      scandata="",
                                      serial=hardware.getdeviceid(),
                                      fw_version=cFirmwareVersion,
                                      linkedrecord="",
                                      audiodata="", // to be added by agent
                                      scansize=gAudioChunkCount, 
                                     }) == 0)
        {
            hwPiezo.playSound("success-local");
        }
    } else {
        agent.send("abortAudioUpload", {
                                      scandata="",
                                      serial=hardware.getdeviceid(),
                                      fw_version=cFirmwareVersion,
                                      linkedrecord="",
                                      audiodata="", // to be added by agent
                                      scansize=gAudioChunkCount, 
                                     });
    }

    // We have completed the process of stopping the sampler
    gSamplerStopping = false;
}


//**********************************************************************
// Called when an audio sampler buffer is ready.  It is called 
// ((sample rate * bytes per sample)/buffer size) times per second.  
// So for 16 kHz sampling of 8-bit A law and 2000 byte buffers, 
// it is called 8x/sec. 
// 
// Since A-law seems to only send full buffers, we send the whole 
// buffer and truncate if necessary on the server side, instead 
// of making a (possibly truncated) copy each time here. This 
// is filed as a bug that may be fixed in the future. 
// 
// Buffer overruns can be caused (and typically are) by this routine
// taking too long.  It typically takes too long if the network is slow
// or flakey when we upload samples.  We are robust if this callback
// takes up to about 100ms.  Typically it should take about 3ms.  

function samplerCallback(buffer, length)
{
    //log("SAMPLER CALLBACK: size " + length");
    if (length <= 0)
    {
        gAudioBufferOverran = true;
        log("Error: audio sampler buffer overrun!!!!!!, last timer="+gAudioTimer+"ms, free-mem:"+imp.getmemoryfree()+", rssi: "+imp.rssi());
        
    }
    else 
    {
        // Time the sending
        gAudioChunkCount++;
        gAudioTimer = hardware.millis();

        // Send the data, managing the last buffer as a special case
        if (gSamplerStopping) {
            if (gLastSamplerBuffer) { 
                // It wasn't quite the last one, send normally
                agent.send("uploadAudioChunk", {buffer=buffer, 
                                                    length=length});
            }
            // Process last buffer later, to do special handling
            gLastSamplerBuffer = buffer;
            gLastSamplerBufLen = length;
        }
        else
        {
            log(format("About to send an audio chunck of size: %d",length));
            log(format("Agent Send Response: %d", agent.send("uploadAudioChunk", {buffer=buffer, length=length})));
        }

        // Finish timing the send.  See function comments for more info. 
        gAudioTimer = hardware.millis() - gAudioTimer;
        //log(gAudioTimer + "ms");
    }
}

//======================================================================
// Accelerometer

// Accelerometer I2C device
class Accelerometer extends I2cDevice
{
    i2cPort = null;
    i2cAddress = null;
    interruptDevice = null; 
    reenableInterrupts = false;  // Allow interrupts to be re-enabled after 
                                 // an interrupt

    constructor(port, address, pin)
    {
        base.constructor(port, address);
        
        //gInitTime.accel = hardware.millis();

        // Verify communication by reading WHO_AM_I register
        local whoami = read(0x0F);
        if (whoami != 0x33)
        {
            log(format("Error reading accelerometer; whoami=0x%02X", 
                              whoami));
        }
        
        write( 0x1F, 0x0 ); // disable ADC and temp sensor
        
        whoami = read( 0x1E );
        write ( 0x1E, whoami | 0x80 );

        // Configure and enable accelerometer and interrupt
        write(0x20, 0x2F); // CTRL_REG1: 10 Hz, low power mode, 
                             // all 3 axes enabled

        write(0x21, 0x09); // CTRL_REG2: Enable high pass filtering and data

        //enableInterrupts();
        disableInterrupts();

        write(0x23, 0x00); // CTRL_REG4: Default related control settings

        write(0x24, 0x08); // CTRL_REG5: Interrupt latched

        // Note: maximum value is 0111 11111 (0x7F). High bit must be 0.
        write(0x32, 0x10); // INT1_THS: Threshold

        write(0x33, 0x1); // INT1_DURATION: any duration

        // Read HP_FILTER_RESET register to set filter. See app note 
        // section 6.3.3. It sounds like this might be the REFERENCE
        // register, 0x26. Commented out as I found it is not needed. 
        //read(0x26);

        write(0x30, 0x2A); // INT1_CFG: Enable OR interrupt for 
                           // "high" values of X, Y, Z
                           
        

        // Clear interrupts before setting handler.  This is needed 
        // otherwise we get a spurious interrupt at boot. 
        clearAccelInterrupt();

        // Configure pin as input, IRQ on both edges
        ioExpander.setDir(pin, 1); // set as input
        ioExpander.setPullDown(pin, 1); // enable pulldown
        ioExpander.setIrqMask(pin, 1); // enable IRQ
        ioExpander.setIrqEdges(pin, 1, 0); // rising only        
        // Set event handler for IRQ
        intHandler.setIrqCallback(pin, handleAccelInt.bindenv(this));
    }

    function enableInterrupts()
    {
        write(0x20, 0x2F); // power up first
        write(0x22, 0x40); // CTRL_REG3: Enable AOI interrupts
    }

    function disableInterrupts()
    {
        write(0x20, 0x0F); // power down
        write(0x22, 0x00); // CTRL_REG3: Disable AOI interrupts
    }

    function clearAccelInterruptUntilCleared()
    {
        // Repeatedly clear the accel interrupt by reading INT1_SRC
        // until there are no interrupts left
        // WARNING: adding log statements in this function
        // causes it to fail for some reason
        local reg;
        while ((reg = read(0x31)) != 0x15)
        {
            //log(format("STATUS: 0x%02X", reg));
            imp.sleep(0.001);
        }
        log(format("STATUS: 0x%02X", reg));
        
    }

    function clearAccelInterrupt()
    {
        read(0x31); // Clear the accel interrupt by reading INT1_SRC
    }

    function handleAccelInt() 
    {
        gAccelInterrupted = true;
        disableInterrupts();
        clearAccelInterrupt();
        if(reenableInterrupts)
        {
            enableInterrupts();
        }
    }
}


//======================================================================
// Utilities

//**********************************************************************

//**********************************************************************
// Temporary function to catch dumb mistakes
function print(str)
{
    log("ERROR USED PRINT FUNCTION. USE SERVER.LOG INSTEAD.");
}


//**********************************************************************
function init_nv_items()
{
    log(format("sleep_count=%d setup_required=%s", 
                    nv.sleep_count, (nv.setup_required?"yes":"no")));
    //log(format("Bootup Reason: %xh", nv.boot_up_reason));
}

function init_unused_pins(i2cDev)
{
    //gInitTime.init_unused = hardware.millis();
    local value = 0;
    
    //1. Set Direction to Input for PIN 3 and 7
    value = i2cDev.read(0x07);
    i2cDev.write(0x07, (value | (1 << (3 & 7)) | (1 << ( 7 & 7))));
    
    //2. Set Pull up for PIN 3 and 7
    value = i2cDev.read( 0x03 );
    i2cDev.write(0x03, (value | (1 << (3 & 7)) | (1 << ( 7 & 7))));
    
    //3. setIRQ Mask to disable interrupts on 3 and 7
    value = i2cDev.read( 0x09 );
    i2cDev.write(0x09, value | ( 0xF8 ));
    
    hardware.pinA.configure(DIGITAL_IN_PULLUP);
    hardware.pinB.configure(DIGITAL_IN_PULLUP);
    hardware.pinC.configure(DIGITAL_IN_PULLUP);
    hardware.pinD.configure(DIGITAL_IN_PULLUP);
    
    if(!DEBUG_UART_ENABLED)
    {
        // Configure these two pins if we are not using the debug uart
        hardware.pin6.configure(DIGITAL_IN_PULLUP);
        hardware.pinE.configure(DIGITAL_IN_PULLUP);
    }
    
    //gInitTime.init_unused = hardware.millis() - gInitTime.init_unused;
}

//**********************************************************************
// Do pre-sleep configuration and initiate deep sleep
function preSleepHandler() {
    updateDeviceState( DeviceState.PRE_SLEEP);

    // Resample the ~CHG charge signal and update chargeStatus.
    // previous_state before going to sleep 
    chargeStatus.chargerCallback();
    
    if( nv.sleep_not_allowed || chargeStatus.previous_state || nv.extend_timeout )
    {
        //Just for testing but we should remove it later
        //hwPiezo.playSound("device-page");
        updateDeviceState( DeviceState.IDLE );
        return;
    }
    
    if( !nv.setup_required )
    {
        // Re-enable accelerometer interrupts
        log("preSleepHandler: about to re-enable accel Intterupts");
        hwAccelerometer.reenableInterrupts = true;
        hwAccelerometer.enableInterrupts();

        // Handle any last interrupts before we clear them all and go to sleep
        log("preSleepHandler: handle any pending interrupts");
        intHandler.handlePin1Int(); 
        log("preSleepHandler: handled pending interrupts");
        // Clear any accelerometer interrupts, then clear the IO expander. 
        // We found this to be necessary to not hang on sleep, as we were
        // getting spurious interrupts from the accelerometer when re-enabling,
        // that were not caught by handlePin1Int. Race condition? 
        log("preSleepHandler: clear out all the pending accel interrupts");
        hwAccelerometer.clearAccelInterruptUntilCleared();
        log("preSleepHandler: clear out all the IOExpander Interrupts");
        intHandler.clearAllIrqs(); 
    
        // When the timer below expires we will hit the sleepHandler function below
        // only enter into the delay wait if the current state is either IDLE or PRE_SLEEP
        // otherwise just get out of this because it would just go into sleep even though
        // someone pushed the button
        if( (gDeviceState == DeviceState.IDLE) || (gDeviceState == DeviceState.PRE_SLEEP) )
        {
            gAccelInterrupted = false;
            log("preSleepHandler: enabled the hysteresis timer");
            gAccelHysteresis.enable();
        }
    }
    else
    {
        // If the setup is required and we timed out for
        // the 5 minute timer then we just enter sleep right away
        // only thing that would wake up the device is the button press
        gAccelInterrupted = false;
        sleepHandler();
    }
}


function configurePinsBeforeSleep()
{

    // Disable the scanner and its UART
    hwScanner.disable();
    hwPiezo.disable();
     
    // set all registers on the SX1508 pin expander to defined values before sleep

    // set registers RegInputDisable, RegLongSlew, RegLowDrive to default values
    i2cDev.write(0x00, 0x00);
    i2cDev.write(0x01, 0x00);
    i2cDev.write(0x02, 0x00);
    // enable the pullup resistor for the button (BUTTON_L) and to disable 
    // microphone and scanner (SW_VCC_EN_L)
    i2cDev.write(0x03, 0x14);
    // set registers RegPullDown, RegOpenDrain, and RegPolarity to default values
    i2cDev.write(0x04, 0x00);
    i2cDev.write(0x05, 0x00);
    i2cDev.write(0x06, 0x00);
    // set all pins on the SX1508 to inputs
    i2cDev.write(0x07, 0xff);
    // set output values in RegData to default values
    i2cDev.write(0x08, 0xff);
    // enable interrupts for button (BUTTON_L), accelerometer (ACCELEROMETER_INT), and charger (CHARGE_PGOOD_L)
    i2cDev.write(0x09, 0x7a);
    // set interrupt trigger to both edges for the enabled interrupts
    i2cDev.write(0x0a, 0xc0);
    i2cDev.write(0x0b, 0x33);
    // clear all interrupts
    i2cDev.write(0x0c, 0xff);    
    i2cDev.write(0x0d, 0xff);

    i2cDev.disable();
    
    // Reconfigure pin1 before sleep
    hardware.pin1.configure(DIGITAL_IN_WAKEUP);
}

//**********************************************************************
// This is where we want to actually enter sleep if there aren’t any 
// further accelerometer interrupts
function sleepHandler()
{
    log("sleepHandler: enter");
    if( gAccelInterrupted )
    {
        log("sleepHandler: aborting sleep due to Accelerometer Interrupt");
        // Transition to the idle state
        hwAccelerometer.reenableInterrupts = false;
        hwAccelerometer.disableInterrupts();
        updateDeviceState(DeviceState.IDLE);
        return;
    }
    
    // free memory
    log(format("Free memory: %d bytes", imp.getmemoryfree()));
    
    assert(gDeviceState == DeviceState.PRE_SLEEP);
    log(format("sleepHandler: entering deep sleep, hardware.pin1=%d", hardware.pin1.read()));
    server.expectonlinein(nv.setup_required?cDeepSleepInSetupMode:cDeepSleepDuration);
    nv.sleep_count++;
    nv.boot_up_reason = 0x0;
    nv.sleep_duration = time();
    
    server.disconnect();
    configurePinsBeforeSleep();
    // We don't need to wrap this in imp.onidle() as per Electric Imp.
    imp.deepsleepfor(nv.setup_required?cDeepSleepInSetupMode:cDeepSleepDuration);
}


//**********************************************************************
// main

function init_done()
{
    if( init_completed )
    {
        intHandler.handlePin1Int(); 
        //log(format("init_stage1: %d\n", gInitTime.init_stage1));
        
        // Since the blinkup is always enabled, there is no need to enable
        // them here
        if( nv.setup_required )
        {
          hwButton.blinkUpDevice(nv.setup_required);
        }
    }
    else
    {
        imp.wakeup(1, init_done );
    }
}

function getUTCTime()
{
    local str ="";
    //[dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSSSSS"];
    local d=date();
    str = format("%04d-%02d-%02d %02d:%02d:%02d.000000", d.year, d.month+1, d.day, d.hour, d.min, d.sec);
    return str;
}

// This is the log function wrapper
// so that we can 
function log(str)
{
    // by default this should be disabled, iff we are debugging locally
    if (DEBUG_UART_ENABLED)
    {
       debug_uart.write("["+getUTCTime()+"] "+str+"\r\n");
    }
    
    // Send the logs to server.log iff the flag is enabled
    // by default we should disable it and send it over to agent
    // so the logs are captured by hiku cloud
    if (IMP_SERVER_LOG_ENABLED)
    {
       server.log(str);
    }
    else
    {
       agentSend("deviceLog", str);
    }
}

function agentSend(key, value)
    {
  if(server.isconnected())
  {
    if(agent.send(key,value) != 0)
    {
       log(format("agentSend: failed for %s",key));
    }
}
}

triggerCount <- 0;
function shippingMode(){
    hwScanner.trigger(triggerCount % 2 == 0);
    triggerCount++;
    if (triggerCount < 40)
    imp.wakeup(0.05, shippingMode);
    else {
       hwPiezo.playSound("blink-up-enabled", false);
       nv.setup_required = true;
           nv.sleep_not_allowed = false;
           gAccelInterrupted = false;
       gDeviceState = DeviceState.PRE_SLEEP;
       triggerCount = 0;
       imp.clearconfiguration();
           sleepHandler();
    }
}

agent.on("shippingMode", function(result) {
    if (imp.getbssid() == FACTORY_BSSID)
        shippingMode();
});

function init()
{
    // We will always be in deep sleep unless button pressed, in which
    // case we need to be as responsive as possible. 
    imp.setpowersave(false);
    //gInitTime.init_stage1 = hardware.millis();
    // I2C bus addresses
    //const cAddrAccelerometer = 0x18;

    // IO expander pin assignments
    //const cIoPinAccelerometerInt = 0;
    //const cIoPinChargeStatus = 1;
    //const cIoPinButton =  2;
    //const cIoPin3v3Switch =  4;
    //const cIoPinScannerTrigger =  5;
    //const cIoPinScannerReset =  6;

    // Create an I2cDevice to pass around
    i2cDev <- I2cDevice(I2C_89, 0x23);
    intHandler <- InterruptHandler(8, i2cDev);  
    ioExpander <- IoExpanderDevice(intHandler);
    
    // This is to default unused pins so that we consume less current
    init_unused_pins(i2cDev);
    
    // 3v3 accessory switch config
    // we don’t need a class for this:
    
    // HACK HACK HACK
    
    // Power to scanner/microphone is now switched at the start 
    // of the code to avoid the brown-out problem (Imp OS32) 
    
    // Configure pin 
    /*
    ioExpander.setPin(4, 1); // start as logic 1
    ioExpander.setDir(4, 0); // set as output
    ioExpander.setPullUp(4, 0); // disable pullup
    ioExpander.setPullDown(4, 1); // enable pulldown
    ioExpander.setDir(4, 1); // set as input
    
    // 5ms later set as output and later drive hard
    imp.wakeup(0.005, function() { ioExpander.setPin(4, 0); ioExpander.setDir(4, 0); } ); 
    */

    //sw3v3 <- Switch3v3Accessory(4);
    //sw3v3.enable();
 
    // Charge status detect config
    chargeStatus <- ChargeStatus(1);

    // Button config
    hwButton <- PushButton(2);

    // Piezo config
    //hwPiezo <- Piezo(hardware.pin5);

    // Scanner config
    hwScanner <-Scanner(5,6);

    // Microphone sampler config
    hwMicrophone <- hardware.pin2;
    hardware.sampler.configure(hwMicrophone, gAudioSampleRate, 
                               [buf1, buf2, buf3, buf4], 
                               samplerCallback, NORMALISE | A_LAW_COMPRESS); 
                       
    log("send buffer size: new= " + sendBufferSize + " bytes, old= "+oldsize+" bytes.");        
    // Accelerometer config
    hwAccelerometer <- Accelerometer(I2C_89, 0x18, 
                                     0);

    // Create our timers
    gButtonTimer <- CancellableTimer(cButtonTimeout, 
                                     hwButton.handleButtonTimeout.bindenv(
                                         hwButton)
                                    );
    gDeepSleepTimer = CancellableTimer(cActualDelayBeforeDeepSleep, preSleepHandler);
    
    gAccelHysteresis <- CancellableTimer( 2, sleepHandler); 
    
    
    // Transition to the idle state
    updateDeviceState(DeviceState.IDLE);
    // Print debug info
    // WARNING: for some reason, if this is uncommented, the device
    // will not wake up if there is motion while the device goes 
    // to sleep!
    //printStartupDebugInfo();
    // free memory
    //log(format("Free memory: %d bytes", imp.getmemoryfree()));
    // Initialization complete notification
    // TODO remove startup tone for final product
    // initialize the nv items on a cold boot

    // This means we had already went to sleep with the button presses
    // to get the device back into blink up mode after the blink-up mode times out
    // the user needs to manually enable it the next time it wakes up
    //imp.enableblinkup(false); 
    // We only wake due to an interrupt or after power loss.  If the 
    // former, we need to handle any pending interrupts. 
    //intHandler.handlePin1Int();     
    //gInitTime.init_stage1 = hardware.millis() - gInitTime.init_stage1;
    init_completed = true;
}

function onConnected(status)
{   
    if (status == SERVER_CONNECTED) {
    if (imp.getbssid() == FACTORY_BSSID) {
        if (gDeepSleepTimer) 
        gDeepSleepTimer.disable();
        gDeepSleepTimer = CancellableTimer(cDelayBeforeDeepSleepFactory, preSleepHandler);
    }
        local timeToConnect = hardware.millis() - entryTime;
        connection_available = true;
        //imp.configure("hiku", [], []);   // this is depcrecated  
        log(format("Reconnected after unexpected disconnect: %d ",nv.disconnect_reason));
        init_nv_items();
                                                 
            // Send the agent our impee ID
        local data = { 
                        impeeId = hardware.getdeviceid(), 
                        fw_version = cFirmwareVersion,
                        bootup_reason = nv.boot_up_reason,
                        disconnect_reason = nv.disconnect_reason,
                        rssi = imp.rssi(),
                        sleep_duration = nv.sleep_duration,
                        osVersion = imp.getsoftwareversion(),
                        time_to_connect = timeToConnect,
                        at_factory = (imp.getbssid() == FACTORY_BSSID),
                        macAddress = imp.getmacaddress(),
                        ssid = imp.getssid()
                    };
        agentSend("init_status", data);
        
        if( nv.setup_required )
        {
            nv.setup_required = false;
            nv.sleep_not_allowed = false;
            nv.setup_count++;
            log("Setup Completed!");
        }
        nv.disconnect_reason = 0;
        
/*
        log(format("total_init:%d, init_stage1: %d, init_stage2: %d, init_unused: %d\n",
            (hardware.millis() - entryTime), gInitTime.init_stage1, gInitTime.init_stage2, gInitTime.init_unused));
        log(format("scanner:%d, button: %d, charger: %d, accel: %d, int handler: %d\n",
            gInitTime.scanner, gInitTime.button, gInitTime.charger, gInitTime.accel, gInitTime.inthandler));  */                  
        
    }
    else
    {
        nv.disconnect_reason = status;
    }
}

function heartBeat()
{
    if(DEBUG_UART_ENABLED)
    {
        imp.wakeup(5,heartBeat);
        log("heart beat!!");
    }
}

// start off here and things should move
// Piezo config
hwPiezo <- Piezo(hardware.pin5); 
if (imp.getssid() == "" && !("first_boot" in nv)) {
    log("entered first boot check");
    nv.first_boot <- 1;
    nv.setup_required = true;
    imp.deepsleepfor(1);
}

init_done();
connMgr <- ConnectionManager();
connMgr.registerCallback(onConnected.bindenv(this));
connMgr.init_connections(); 
init();
heartBeat();